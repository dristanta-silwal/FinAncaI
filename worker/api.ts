import { Hono } from 'hono';
import { authMiddleware } from './middleware';
type Env = {
  DB: D1Database;
};
type Variables = {
    user: { id: string };
};
const app = new Hono<{ Bindings: Env, Variables: Variables }>();
app.use('/*', authMiddleware);
app.get('/dashboard-data', async (c) => {
  try {
    const user = c.get('user');
    const statementCycleQuery = c.env.DB.prepare(`
      SELECT
        strftime('%Y-%m', date) as name,
        SUM(CASE WHEN amount > 0 THEN amount ELSE 0 END) as income,
        SUM(CASE WHEN amount < 0 THEN -amount ELSE 0 END) as expenses
      FROM transactions
      WHERE user_id = ?1
      GROUP BY strftime('%Y-%m', date)
      ORDER BY strftime('%Y-%m', date) DESC
      LIMIT 6
    `).bind(user.id);
    const creditUtilizationQuery = c.env.DB.prepare(`
      SELECT
        a.name,
        SUM(CASE WHEN t.amount < 0 THEN -t.amount ELSE 0 END) as value
      FROM transactions t
      JOIN accounts a ON t.account_id = a.id
      WHERE a.type = 'credit_card' AND t.user_id = ?1
      GROUP BY a.name
    `).bind(user.id);
    const [statementCycleResult, creditUtilizationResult] = await c.env.DB.batch([
      statementCycleQuery,
      creditUtilizationQuery,
    ]);
    const dashboardData = {
      statementCycle: statementCycleResult.results?.reverse() || [],
      creditUtilization: creditUtilizationResult.results || [],
    };
    return c.json({ success: true, data: dashboardData });
  } catch (error) {
    console.error('Failed to fetch dashboard data:', error);
    return c.json({ success: false, error: 'Could not retrieve dashboard data.' }, 500);
  }
});
app.get('/insights', async (c) => {
  try {
    const user = c.get('user');
    const { results } = await c.env.DB.prepare(
      `SELECT id, type, content as text FROM insights WHERE user_id = ?1 ORDER BY date DESC LIMIT 5`
    ).bind(user.id).all();
    return c.json({ success: true, data: results || [] });
  } catch (error) {
    console.error('Failed to fetch insights:', error);
    return c.json({ success: false, error: 'Could not retrieve insights.' }, 500);
  }
});
app.get('/report', async (c) => {
  try {
    const user = c.get('user');
    const monthFilter = `strftime('%Y-%m', 'now', 'start of month', '-1 month')`;
    const metricsQuery = c.env.DB.prepare(`
        SELECT
            SUM(CASE WHEN amount > 0 THEN amount ELSE 0 END) as totalIncome,
            SUM(CASE WHEN amount < 0 THEN -amount ELSE 0 END) as totalExpenses,
            (SELECT category FROM transactions WHERE amount < 0 AND user_id = ?1 AND strftime('%Y-%m', date) = ${monthFilter} GROUP BY category ORDER BY SUM(-amount) DESC LIMIT 1) as topCategory
        FROM transactions
        WHERE user_id = ?1 AND strftime('%Y-%m', date) = ${monthFilter}
    `).bind(user.id);
    const insightsQuery = c.env.DB.prepare(
      `SELECT type, content FROM insights
       WHERE user_id = ?1 AND strftime('%Y-%m', date) = ${monthFilter}
       ORDER BY date DESC LIMIT 4`
    ).bind(user.id);
    const [metricsResult, insightsResult] = await c.env.DB.batch([metricsQuery, insightsQuery]);
    const metrics = (metricsResult.results?.[0] || {}) as { totalIncome?: number, totalExpenses?: number, topCategory?: string };
    const insights = (insightsResult.results || []) as { type: string, content: string }[];
    const totalIncome = metrics.totalIncome || 0;
    const totalExpenses = metrics.totalExpenses || 0;
    const savingsRate = totalIncome > 0 ? ((totalIncome - totalExpenses) / totalIncome) * 100 : 0;
    const month = new Date();
    month.setMonth(month.getMonth() - 1);
    const reportMonth = month.toLocaleString('default', { month: 'long', year: 'numeric' });
    let report = `# Monthly Analyst Report: ${reportMonth}\n\n`;
    report += `## Executive Summary\nThis report provides a comprehensive analysis of your financial activity for ${reportMonth}. Key metrics and AI-generated insights are summarized below.\n\n`;
    report += `## Key Metrics\n`;
    report += `- **Total Income:** ${totalIncome.toFixed(2)}\n`;
    report += `- **Total Expenses:** ${totalExpenses.toFixed(2)}\n`;
    report += `- **Savings Rate:** ${savingsRate.toFixed(1)}%\n`;
    report += `- **Top Spending Category:** ${metrics.topCategory || 'N/A'}\n\n`;
    report += `## AI-Generated Insights & Anomalies\n`;
    if (insights.length > 0) {
        insights.forEach(insight => {
            report += `- **${insight.type}:** ${insight.content}\n`;
        });
    } else {
        report += `- No specific insights generated for this period.\n`;
    }
    report += `\n*This report was automatically generated by Analyst Ledger.*`;
    return c.json({ success: true, data: { report } });
  } catch (error) {
    console.error('Failed to generate report:', error);
    return c.json({ success: false, error: 'Could not generate the report.' }, 500);
  }
});
export default app;